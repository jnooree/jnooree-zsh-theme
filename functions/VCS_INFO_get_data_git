# The Z Shell is copyright (c) 1992-2017 Paul Falstad, Richard Coleman,
# Zoltán Hidvégi, Andrew Main, Peter Stephenson, Sven Wischnowsky, and
# others.  All rights reserved.  Individual authors, whether or not
# specifically named, retain copyright in all changes; in what follows, they
# are referred to as `the Zsh Development Group'.  This is for convenience
# only and this body has no legal status.  The Z shell is distributed under
# the following licence; any provisions made in individual files take
# precedence.
#
# Permission is hereby granted, without written agreement and without
# licence or royalty fees, to use, copy, modify, and distribute this
# software and to distribute modified versions of this software for any
# purpose, provided that the above copyright notice and the following
# two paragraphs appear in all copies of this software.
#
# In no event shall the Zsh Development Group be liable to any party for
# direct, indirect, special, incidental, or consequential damages arising out
# of the use of this software and its documentation, even if the Zsh
# Development Group have been advised of the possibility of such damage.
#
# The Zsh Development Group specifically disclaim any warranties, including,
# but not limited to, the implied warranties of merchantability and fitness
# for a particular purpose.  The software provided hereunder is on an "as is"
# basis, and the Zsh Development Group have no obligation to provide
# maintenance, support, updates, enhancements, or modifications.

# see https://github.com/zsh-users/zsh/blob/master/Functions/VCS_Info/Backends/VCS_INFO_get_data_git

setopt localoptions extendedglob NO_shwordsplit
local gitdir gitbase gitbranch gitaction gitunstaged gitstaged gitsha1 gitmisc
local -i querystaged queryunstaged
local -a git_patches_applied git_patches_unapplied
local -A hook_com

(( ${+functions[VCS_INFO_git_getaction]} )) ||
VCS_INFO_git_getaction () {
	local gitdir="$1" tmp

	for tmp in "${gitdir}/rebase-apply" "${gitdir}/rebase"; do
		if [[ -d ${tmp} ]] ; then
			if   [[ -f "${tmp}/rebasing" ]] ; then
				gitaction=" >R>"
			elif [[ -f "${tmp}/applying" ]] ; then
				gitaction=" >A>"
			else
				gitaction=" >R?>"
			fi
			return 0
		fi
	done

	if [[ -e ${gitdir}/BISECT_LOG ]]; then
		gitaction=" <B>"
	elif [[ -e ${gitdir}/MERGE_HEAD ]]; then
		gitaction=" >M<"
	elif [[ -e ${gitdir}/rebase-merge ]]; then
		gitaction=" >R>"
	elif [[ -e ${gitdir}/REVERT_HEAD ]]; then
		gitaction=" <V|"
	elif [[ -e ${gitdir}/CHERRY_PICK_HEAD ]]; then
		gitaction=" <C<"
	else
		return 1
	fi

	return 0
}

(( ${+functions[VCS_INFO_git_getbranch]} )) ||
VCS_INFO_git_getbranch () {
	local ref compare ahead behind
	local -a gitstatus

	if ! ref="$(git symbolic-ref -q --short HEAD)"; then
		# detached HEAD
		ref="→ $(git rev-parse --short HEAD)"
	elif compare="$(git rev-list --left-right --count \
			"HEAD...${ref}@{upstream}" -- 2>/dev/null)"; then
		read -r ahead behind <<<"${compare}"
		(( ahead )) && gitstatus+=("%F{green}+${ahead}")
		(( behind )) && gitstatus+=("%F{red}-${behind}")
	else
		# no upstream
		gitstatus+=("%F{yellow}±?")
	fi

	if stashcnt="$(git rev-list -g --count refs/stash -- 2>/dev/null)"; then
		gitstatus+=("%F{magenta}↓${stashcnt}")
	fi

	gitbranch="${ref//\%/%%}${gitstatus:+"%F{blue}:"}${(j"%F{blue}/")gitstatus}"
	return 0
}

gitdir=${vcs_comm[gitdir]}
VCS_INFO_git_getbranch ${gitdir}
gitbase=${vcs_comm[basedir]}
if [[ -z ${gitdir} || -z ${gitbranch} || -z ${gitbase} ]]; then
	return 1
fi

rrn=${gitbase:t}
if zstyle -t ":vcs_info:${vcs}:${usercontext}:${rrn}" "check-for-changes" ; then
	querystaged=1
	queryunstaged=1
elif zstyle -t ":vcs_info:${vcs}:${usercontext}:${rrn}" "check-for-staged-changes" ; then
	querystaged=1
fi

if (( queryunstaged )); then
	${vcs_comm[cmd]} -C ${gitbase} diff \
			--no-ext-diff --ignore-submodules=dirty --quiet --exit-code 2>/dev/null ||
		gitunstaged=1
fi

if (( querystaged )) ; then
	if ${vcs_comm[cmd]} rev-parse --quiet --verify HEAD &>/dev/null; then
		${vcs_comm[cmd]} diff-index --cached --quiet --ignore-submodules=dirty HEAD 2>/dev/null
		(( $? && $? != 128 )) && gitstaged=1
	else
		# empty repository (no commits yet)
		# 4b825dc642cb6eb9a060e54bf8d69288fbee4904 is the git empty tree.
		${vcs_comm[cmd]} diff-index --cached --quiet --ignore-submodules=dirty 4b825dc642cb6eb9a060e54bf8d69288fbee4904 2>/dev/null
		(( $? && $? != 128 )) && gitstaged=1
	fi
fi

VCS_INFO_adjust
VCS_INFO_git_getaction ${gitdir}

backend_misc[patches]="${gitmisc}"
VCS_INFO_formats "${gitaction}" "${gitbranch}" "${gitbase}" \
	"${gitstaged}" "${gitunstaged}" "${gitsha1}" "${gitmisc}"
return 0
